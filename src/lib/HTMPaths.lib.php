<?php
/**
 * The HTMPaths library provides functions to manage the SEO friendly URLs used on the site, and allow these to be managed, modified and deleted
 * 
 * HTM paths are generated by associating a .htm path with a PHP file and a particular set of parameters. 
 * So, for example, index.php?id=1 might be linked to home.htm.
 * When home.htm is requested, the system will redirect it to index.php?id=1.
 * Each association can have up to three parameters
 * 
 * @package Library
 * @subpackage HTM Paths
 * @since 2.0
 **/
if($GLOBALS['authcode']!='Acojc5ttj 24t0qtqv#') die('Hacking Attempt');

/**
 * Fetches the PHP path from a given HTM Path
 * 
 * Any parameters that are needed by the PHP file will be added to the $GLOBALS variable 
 *
 * @param string $htmpath The HTM path to identify
 * @return string The name of the PHP file to be called
 *
 */
function getPHPPath($htmpath){
	$htmpath = mysql_real_escape_string($htmpath);
	$res = $GLOBALS['db']->selectrow("select * from htmpath where htmpath = '$htmpath'");
	if(!empty($res)){
		if(!empty($res['att1'])) $GLOBALS[$res['att1']] = $res['val1'];
		if(!empty($res['att2'])) $GLOBALS[$res['att2']] = $res['val2'];
		if(!empty($res['att3'])) $GLOBALS[$res['att3']] = $res['val3'];
		$path = $res['filename'];
		return $path;
	}
	return false;
}

/**
 * This function will identify the current HTM path for a given PHP file and parameters, but will not create it if it does not exist
 *
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return string The HTM Path, relative to the current page
 *
 */
function getExistingHTMPath($filename,$att1=null,$val1=null,$att2=null,$val2=null,$att3=null,$val3=null){
	if(empty($GLOBALS['settings']->usefriendlyurls)){
		$path = $filename;
		if(!empty($att1)){
			$path .= '?'.$att1.'='.$val1;
			if(!empty($att2)){
				$path .= '&'.$att2.'='.$val2;	
				if(!empty($att3)){
					$path .= '&'.$att3.'='.$val3;	
				}	
			}	
		}
		return $path;
	}
	if(empty($att1) && file_exists($filename)){
		$htmpath = $GLOBALS['webroot'] . pathinfo($filename,PATHINFO_FILENAME) . '.htm';
		return $htmpath;
	}
	$where = getHTMPathWhere($att1,$val1,$att2,$val2,$att3,$val3);
	$filename = mysql_real_escape_string($filename);
	$htmpath = $GLOBALS['db']->selectsingle("select htmpath from htmpath where filename = '$filename' and $where");
	if(empty($htmpath)){
		$htmpath = 'index.htm';
	}
	if(substr($htmpath,0,4) != 'http' && substr($htmpath,0,1) != '/') $htmpath = $GLOBALS['webroot'].$htmpath;
	return $htmpath;	
}

/**
 * This function will identify the HTM path for a given PHP file and parameters, and will create a new one, and cache it, if required
 *
 * @param string $moduleid The name of the module to use to build the HTM path if required, or null to use the core
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return string The HTM Path, relative to the current page
 *
 */
function getHTMPath($moduleid,$filename,$att1=null,$val1=null,$att2=null,$val2=null,$att3=null,$val3=null){
	if(empty($GLOBALS['settings']->usefriendlyurls)){
		$path = $filename;
		if(!empty($att1)){
			$path .= '?'.$att1.'='.$val1;
			if(!empty($att2)){
				$path .= '&'.$att2.'='.$val2;	
				if(!empty($att3)){
					$path .= '&'.$att3.'='.$val3;	
				}	
			}	
		}
		return $path;
	}
	if(empty($att1) && file_exists($filename)){
		$htmpath = $GLOBALS['webroot'] . pathinfo($filename,PATHINFO_FILENAME) . '.htm';
		return $htmpath;
	}
	$where = getHTMPathWhere($att1,$val1,$att2,$val2,$att3,$val3);
	$filename = mysql_real_escape_string($filename);
	$htmpath = $GLOBALS['db']->selectsingle("select htmpath from htmpath where filename = '$filename' and $where");
	if(empty($htmpath)){
		if(!empty($moduleid)){
			try{
				$module = Module::getModule($moduleid);
				return $module->getHTMPath($filename,$att1,$val1,$att2,$val2,$att3,$val3);
			}catch(exception $err){}
		}
		
		$type = pathinfo($filename,PATHINFO_FILENAME);
		switch($type){	
			case 'index':
				try{
					$page = Page::GetNewPage($val1);
					if($page->id==PAGE_HOME) $htmpath = 'index.htm';
					else{
						switch($page->type){
							case 'link':
								$htmpath = $page->forwardurl;
								if(substr($htmpath,0,4) != 'http' && substr($htmpath,0,1) != '/') $htmpath = $GLOBALS['webroot'].$htmpath;
								return $htmpath;
								break;					
							default:
								$path = getPagePath($page->parent);
								$htmpath = getHTMPathFromTitle($page->pathstub,$path,$filename,$att1,$val1,$att2,$val2,$att3,$val3);
								break;					
							}
					}
				}catch(exception $err){
					$htmpath = 'index.htm';
				}
				break;
			default:
				$htmpath = 'index.htm';
				break;
		}
		if(!empty($htmpath)) createHTMPath($htmpath,$filename,$att1,$val1,$att2,$val2,$att3,$val3,$error);
	}
	if(substr($htmpath,0,4) != 'http' && substr($htmpath,0,1) != '/') $htmpath = $GLOBALS['webroot'].$htmpath;
	return $htmpath;	
}

/**
 * Builds an HTM path from the given string. 
 * 
 * This function will add the created filename to the given path.
 * The filename is generated by cleaning the title (with getCleanRoot), 
 * then checking to make sure the name is unique. If not, an incrementor is added (eg: index_3.htm)
 *
 * @param string $title The title from which the file name should be built
 * @param string $path The path to use for this file
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return string The full HTM path
 *
 */
function getHTMPathFromTitle($title,$path='',$filename='',$att1='',$val1='',$att2='',$val2='',$att3='',$val3=''){
	if(!empty($path) && substr($path,-1) != '/') $path .= '/';
	$htmpath = getCleanRoot($title);
	$ind = 2;
	$root = $htmpath;
	$where = getHTMPathWhere($att1,$val1,$att2,$val2,$att3,$val3);
	$path = mysql_real_escape_string($path);
	$filename = mysql_real_escape_string($filename);
	while($GLOBALS['db']->selectsingle("select count(*) from htmpath where htmpath = '$path$htmpath.htm' and not (filename = '$filename' and $where)")){
		$htmpath = $root.'_'.$ind;
		$ind ++;
	}
	return $path.$htmpath.'.htm';
}

/**
 * Fetches the HTM Path of a page from an already constructed PHP link
 * 
 * This will convert
 *  - index.php?id=6
 * into
 *  - home.htm
 *
 * @param string $link The link to the PHP page
 * @return string The current HTM Path for the given link
 *
 */
function getHTMPathFromLink($link){
	$parts = parse_url($link);
	$filename = basename($parts['path']);
	$queries = explode('&',$parts['query']);
	list($attribute,$attvalue) = explode('=',$queries[0]);
	return getExistingHTMPath($filename,$attribute,$attvalue);
}

/**
 * Saves a given HTM path to the database cache
 *
 * @param string $htmpath The HTM Path to save
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @param string $error A holder for any error messages
 * @return int The ID of the inserted / modified record
 *
 */
function createHTMPath($htmpath,$filename,$att1,$val1,$att2=null,$val2=null,$att3=null,$val3=null,&$error){
	$values = array();
	$encoding =  mb_detect_encoding($htmpath);
	$h = urldecode($htmpath);
	$h2 = iconv($encoding, 'utf-8',$h);
	$values['htmpath'] =$htmpath;
	//else $values['htmpath'] = $htmpath;
	$values['filename'] = $filename;
	$values['att1'] = $att1;
	$values['val1'] = $val1;
	$values['att2'] = $att2;
	$values['val2'] = $val2;
	$values['att3'] = $att3;
	$values['val3'] = $val3;
	$pks = array();
	$pks['filename'] = $filename;
	$pks['att1'] = $att1;
	$pks['val1'] = $val1;
	$pks['att2'] = $att2;
	$pks['val2'] = $val2;
	$pks['att3'] = $att3;
	$pks['val3'] = $val3;
	$id = $GLOBALS['db']->insertupdate('htmpath',$values,$pks,'id');	
	if($id===false){
		$error = mysql_error();
	}
	return $id;
}

/**
 * Deletes an HTM Path from the database cache
 *
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return bool The success or failure of the action
 *
 */
function deleteHTMPath($filename,$att1,$val1,$att2='',$val2='',$att3='',$val3=''){
	$where = getHTMPathWhere($att1,$val1,$att2,$val2,$att3,$val3);
	$res = $GLOBALS['db']->execute("delete from htmpath where filename = '$filename' and $where");
	if($res === false) return $res;
	return $res;
}


/**
 * Deletes the HTM Paths of all the child pages of the given page, optionally recursively.
 *
 * @param string $filename The PHP file
 * @param int $id The ID of the parent page
 * @param bool $recursive Whether or not to recurse the action
 * @return void 
 *
 */
function deleteChildHTMPath($filename,$id, $recursive = false){
	$sql = "select * from pages where parent = " . $id;
	$children = $GLOBALS['db']->select($sql);		
	foreach($children as $child){
		deleteHTMPath($filename,'id',$child['id']);
		if($recursive) deleteChildHTMPath($filename,$child['id'],$recursive);		
	}
}

/**
 * Deletes the currently cached HTM Path for the page, then rebuilds the HTM Path with rules supplied by the module
 * 
 * All known links to this page will be updated. Specifically:
 *  - All standard content
 *  - All references in any content block properties
 * In addition, this method fires the htmpathResetting event, passing the oldvalue and newvalue in the data variable.
 *
 * @param string $module The name of the module to use to create the new Path, or null to use the core
 * @param string $filename The PHP file
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return bool Success or failure of the action
 *
 */
function resetHTMPath($module,$filename,$att1,$val1,$att2='',$val2='',$att3='',$val3=''){
	$oldpath = substr(getExistingHTMPath($filename,$att1,$val1,$att2,$val2,$att3,$val3),strlen($GLOBALS['webroot']));
	$res = deleteHTMPath($filename,$att1,$val1,$att2,$val2,$att3,$val3);
	if($res){
		$newpath = substr(getHTMPath($module,$filename,$att1,$val1,$att2,$val2,$att3,$val3),strlen($GLOBALS['webroot']));
		if(substr(strtolower($newpath),0,4) != 'http' || substr(strtolower($newpath),0,strlen($GLOBALS['settings']->siteroot)) == strtolower($GLOBALS['settings']->siteroot)){
			resetHTMPathsInTable('content','content',$oldpath,$newpath);
			resetHTMPathsInTable('contentproperties','value',$oldpath,$newpath);
			$data = array('oldpath'=>$oldpath,'newpath'=>$newpath);
			fireEvent('htmpathResetting',$data);
		}
	}
	return $res;		
}

/**
 * Find all instances of an old HTM Path within the contents of a given database table, and replace them with a new HTM Path
 *
 * @param string $tablename The name of the table to search
 * @param string $columnname The name of the column within the table to search
 * @param string $oldpath The old path to search for
 * @param string $newpath The replacement path
 * @return void 
 *
 */
function resetHTMPathsInTable($tablename, $columnname, $oldpath, $newpath){
	$rows = $GLOBALS['db']->select("select * from $tablename where $columnname like '%$oldpath%'");
	if($rows && count($rows)){
		foreach($rows as $row){
			$newcontent = str_replace($oldpath,$newpath,$row[$columnname]);
			if($newcontent != $row[$columnname]){
				@$GLOBALS['db']->update($tablename,array($columnname=>$newcontent),array('id'=>$row['id']));
			}
		}	
	}
	// identify fields that have been base64 encoded
	// Note: this only identifies Base 64 encoded serialised arrays (by identifying the 'a:' that starts all such strings). 
	$rows = $GLOBALS['db']->select("select * from $tablename where $columnname like 'YTo%'");
	if($rows && count($rows)){
		foreach($rows as $row){
			$content = base64_decode($row[$columnname]);
			$array = unserialize($content);
			$newarray = resetHTMPathsInArray($array,$oldpath,$newpath);
			$newcontent = serialize($newarray);
			if($newcontent != $content){
				@$GLOBALS['db']->update($tablename,array($columnname=>base64_encode($newcontent)),array('id'=>$row['id']));
			}
		}	
	}
}

/**
 * Replace an old link with a new one in all the items in an array
 *
 * @param array $array The array to check
 * @param string $oldpath The old link
 * @param string $newpath The new link
 * @return array The modified array
 *
 */
function resetHTMPathsInArray($array, $oldpath, $newpath){
	foreach($array as &$item){
		if(is_array($item)){
			resetHTMPathsInArray($item,	$oldpath, $newpath);
		}else{
			$item = str_replace($oldpath,$newpath,$item);
		}
	}
	return $array;
}

/**
 * Builds a 'Where' clause for a database query, used to query the HTM Pathy database cache
 *
 * @param string $att1 The name of the first parameter
 * @param mixed $val1 The value of the first parameter
 * @param mixed $att2 The name of the second parameter
 * @param mixed $val2 The value of the second parameter
 * @param mixed $att3 The name of the third parameter
 * @param mixed $val3 The value of the third parameter
 * @return string The resulting WHERE clause
 *
 */
function getHTMPathWhere($att1,$val1,$att2='',$val2='',$att3='',$val3=''){	
	$att1 = mysql_real_escape_string($att1);
	$val1 = mysql_real_escape_string($val1);
	$att2 = mysql_real_escape_string($att2);
	$val2 = mysql_real_escape_string($val2);
	$att3 = mysql_real_escape_string($att3);
	$val3 = mysql_real_escape_string($val3);
	$where = "((att1 = '$att1' and val1 = '$val1' and att2 = '$att2' and val2 = '$val2' and att3 = '$att3' and val3 = '$val3')";
	$where .= " or (att1 = '$att1' and val1 = '$val1' and att2 = '$att3' and val2 = '$val3' and att3 = '$att2' and val3 = '$val2')";
	$where .= " or (att1 = '$att2' and val1 = '$val2' and att2 = '$att1' and val2 = '$val1' and att3 = '$att3' and val3 = '$val3')";
	$where .= " or (att1 = '$att2' and val1 = '$val2' and att2 = '$att3' and val2 = '$val3' and att3 = '$att1' and val3 = '$val1')";
	$where .= " or (att1 = '$att3' and val1 = '$val3' and att2 = '$att1' and val2 = '$val1' and att3 = '$att2' and val3 = '$val2')";
	$where .= " or (att1 = '$att3' and val1 = '$val3' and att2 = '$att2' and val2 = '$val2' and att3 = '$att1' and val3 = '$val1'))";
	return $where;
}

/**
 * Constructs the path part of an HTM path by recursing through parent pages
 *
 * @param int $sourceid The ID of the child page
 * @return string The constructed path
 *
 */
function getPagePath($sourceid){
	if(!is_numeric($sourceid)) $sourceid = 0;
	try{
		$page = Page::GetNewPage($sourceid);
		if($page->parent == null){
			if(in_array($page->id,array(PAGE_MAINMENU,PAGE_ORPHANMENU))) return '';
			else return getCleanRoot($page->menuname);
		}
		$path = getCleanRoot($page->menuname);
		$parentpath = getPagePath($page->parent);
		if(!empty($parentpath)){
			$path = getPagePath($page->parent) . '/' . $path;
		}
	}
	catch(exception $err){
		return '';	
	}
	return $path;
}

function cacheContent($htmpath,$content){
	$res = $GLOBALS['db']->update('htmpath',array('cache'=>$content),array('htmpath'=>$htmpath));
	return $res;
}

?>